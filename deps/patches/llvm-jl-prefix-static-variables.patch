From ea445dcaab3d5d50a7042a49366e25f704a585f4 Mon Sep 17 00:00:00 2001
From: Valentin Churavy <v.churavy@gmail.com>
Date: Wed, 18 Nov 2020 12:49:56 -0500
Subject: [PATCH] manually prefix global variables

---
 llvm/lib/Support/ManagedStatic.cpp | 28 ++++++++++++++--------------
 1 file changed, 14 insertions(+), 14 deletions(-)

diff --git llvm/lib/Support/ManagedStatic.cpp llvm/lib/Support/ManagedStatic.cpp
index 053493f72fb..881301c827a 100644
--- llvm/lib/Support/ManagedStatic.cpp
+++ llvm/lib/Support/ManagedStatic.cpp
@@ -17,17 +17,17 @@
 #include <mutex>
 using namespace llvm;
 
-static const ManagedStaticBase *StaticList = nullptr;
-static std::recursive_mutex *ManagedStaticMutex = nullptr;
-static llvm::once_flag mutex_init_flag;
+static const ManagedStaticBase *JL_StaticList = nullptr;
+static std::recursive_mutex *JL_ManagedStaticMutex = nullptr;
+static llvm::once_flag JL_mutex_init_flag;
 
 static void initializeMutex() {
-  ManagedStaticMutex = new std::recursive_mutex();
+  JL_ManagedStaticMutex = new std::recursive_mutex();
 }
 
 static std::recursive_mutex *getManagedStaticMutex() {
-  llvm::call_once(mutex_init_flag, initializeMutex);
-  return ManagedStaticMutex;
+  llvm::call_once(JL_mutex_init_flag, initializeMutex);
+  return JL_ManagedStaticMutex;
 }
 
 void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),
@@ -43,8 +43,8 @@ void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),
       DeleterFn = Deleter;
 
       // Add to list of managed statics.
-      Next = StaticList;
-      StaticList = this;
+      Next = JL_StaticList;
+      JL_StaticList = this;
     }
   } else {
     assert(!Ptr && !DeleterFn && !Next &&
@@ -53,17 +53,17 @@ void ManagedStaticBase::RegisterManagedStatic(void *(*Creator)(),
     DeleterFn = Deleter;
 
     // Add to list of managed statics.
-    Next = StaticList;
-    StaticList = this;
+    Next = JL_StaticList;
+    JL_StaticList = this;
   }
 }
 
 void ManagedStaticBase::destroy() const {
   assert(DeleterFn && "ManagedStatic not initialized correctly!");
-  assert(StaticList == this &&
+  assert(JL_StaticList == this &&
          "Not destroyed in reverse order of construction?");
   // Unlink from list.
-  StaticList = Next;
+  JL_StaticList = Next;
   Next = nullptr;
 
   // Destroy memory.
@@ -78,6 +78,6 @@ void ManagedStaticBase::destroy() const {
 void llvm::llvm_shutdown() {
   std::lock_guard<std::recursive_mutex> Lock(*getManagedStaticMutex());
 
-  while (StaticList)
-    StaticList->destroy();
+  while (JL_StaticList)
+    JL_StaticList->destroy();
 }
-- 
2.29.2

